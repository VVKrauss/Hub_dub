// src/utils/migrationUtility.ts
import { supabase } from '../lib/supabase';
import SimpleRegistrationService from '../services/SimpleRegistrationService';

export interface MigrationStatus {
  success: boolean;
  message: string;
  details?: any;
}

export class MigrationUtility {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
   */
  static async checkNewSystemAvailability(): Promise<MigrationStatus> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã simple_registrations
      const { data, error } = await supabase
        .from('simple_registrations')
        .select('id')
        .limit(1);

      if (error) {
        return {
          success: false,
          message: '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é.',
          details: error
        };
      }

      return {
        success: true,
        message: '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞'
      };

    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
        details: error
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  static async runMigration(): Promise<MigrationStatus> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π...');

      const result = await SimpleRegistrationService.migrateOldRegistrations();
      
      if (!result.success) {
        return {
          success: false,
          message: result.message
        };
      }

      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return {
        success: true,
        message: '–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏',
        details: error
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–∞–º–∏
   */
  static async validateMigration(): Promise<MigrationStatus> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...');

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
      const { data: oldEvents, error: oldError } = await supabase
        .from('events')
        .select('id, title, registrations, registrations_list, current_registration_count')
        .or('registrations.not.is.null,registrations_list.not.is.null');

      if (oldError) {
        throw oldError;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
      const validationResults = [];
      
      for (const event of oldEvents || []) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
          const newEventData = await SimpleRegistrationService.getEventWithRegistrations(event.id);
          const stats = await SimpleRegistrationService.getRegistrationStats(event.id);

          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
          let oldActiveCount = 0;
          if (event.registrations?.reg_list) {
            oldActiveCount = event.registrations.reg_list.filter((r: any) => r.status === true).length;
          } else if (event.registrations_list) {
            oldActiveCount = event.registrations_list.filter((r: any) => r.status === true).length;
          }

          const validation = {
            eventId: event.id,
            eventTitle: event.title,
            oldActiveRegistrations: oldActiveCount,
            newActiveRegistrations: stats?.active || 0,
            consistent: oldActiveCount === (stats?.active || 0)
          };

          validationResults.push(validation);
          
          if (validation.consistent) {
            console.log(`‚úÖ ${event.title}: ${oldActiveCount} = ${stats?.active || 0}`);
          } else {
            console.log(`‚ö†Ô∏è ${event.title}: ${oldActiveCount} ‚â† ${stats?.active || 0}`);
          }

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏—è ${event.id}:`, error);
          validationResults.push({
            eventId: event.id,
            eventTitle: event.title,
            oldActiveRegistrations: 0,
            newActiveRegistrations: 0,
            consistent: false,
            error: error
          });
        }
      }

      const totalEvents = validationResults.length;
      const consistentEvents = validationResults.filter(r => r.consistent).length;
      const inconsistentEvents = totalEvents - consistentEvents;

      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
      console.log(`–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${totalEvents}`);
      console.log(`–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö: ${consistentEvents}`);
      console.log(`–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${inconsistentEvents}`);

      return {
        success: inconsistentEvents === 0,
        message: inconsistentEvents === 0 
          ? `–í—Å–µ ${totalEvents} —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏`
          : `–ù–∞–π–¥–µ–Ω–æ ${inconsistentEvents} –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ ${totalEvents} —Å–æ–±—ã—Ç–∏–π`,
        details: validationResults
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      return {
        success