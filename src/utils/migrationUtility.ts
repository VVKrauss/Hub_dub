// src/utils/migrationUtility.ts
import { supabase } from '../lib/supabase';
import SimpleRegistrationService from '../services/SimpleRegistrationService';

export interface MigrationStatus {
  success: boolean;
  message: string;
  details?: any;
}

export class MigrationUtility {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
   */
  static async checkNewSystemAvailability(): Promise<MigrationStatus> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã simple_registrations
      const { data, error } = await supabase
        .from('simple_registrations')
        .select('id')
        .limit(1);

      if (error) {
        return {
          success: false,
          message: '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é.',
          details: error
        };
      }

      return {
        success: true,
        message: '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞'
      };

    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
        details: error
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  static async runMigration(): Promise<MigrationStatus> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π...');

      const { error } = await supabase.rpc('migrate_old_registrations');
      
      if (error) {
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`,
          details: error
        };
      }

      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return {
        success: true,
        message: '–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏',
        details: error
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–∞–º–∏
   */
  static async validateMigration(): Promise<MigrationStatus> {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...');

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
      const { data: oldEvents, error: oldError } = await supabase
        .from('events')
        .select('id, title, registrations, registrations_list, current_registration_count')
        .or('registrations.not.is.null,registrations_list.not.is.null');

      if (oldError) {
        throw oldError;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
      const validationResults = [];
      
      for (const event of oldEvents || []) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
          const newEventData = await SimpleRegistrationService.getEventWithRegistrations(event.id);
          const stats = await SimpleRegistrationService.getRegistrationStats(event.id);

          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
          let oldActiveCount = 0;
          if (event.registrations?.reg_list) {
            oldActiveCount = event.registrations.reg_list.filter((r: any) => r.status === true).length;
          } else if (event.registrations_list) {
            oldActiveCount = event.registrations_list.filter((r: any) => r.status === true).length;
          }

          const validation = {
            eventId: event.id,
            eventTitle: event.title,
            oldActiveRegistrations: oldActiveCount,
            newActiveRegistrations: stats?.active || 0,
            consistent: oldActiveCount === (stats?.active || 0)
          };

          validationResults.push(validation);
          
          if (validation.consistent) {
            console.log(`‚úÖ ${event.title}: ${oldActiveCount} = ${stats?.active || 0}`);
          } else {
            console.log(`‚ö†Ô∏è ${event.title}: ${oldActiveCount} ‚â† ${stats?.active || 0}`);
          }

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏—è ${event.id}:`, error);
          validationResults.push({
            eventId: event.id,
            eventTitle: event.title,
            oldActiveRegistrations: 0,
            newActiveRegistrations: 0,
            consistent: false,
            error: error
          });
        }
      }

      const totalEvents = validationResults.length;
      const consistentEvents = validationResults.filter(r => r.consistent).length;
      const inconsistentEvents = totalEvents - consistentEvents;

      console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
      console.log(`–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: ${totalEvents}`);
      console.log(`–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö: ${consistentEvents}`);
      console.log(`–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${inconsistentEvents}`);

      return {
        success: inconsistentEvents === 0,
        message: inconsistentEvents === 0 
          ? `–í—Å–µ ${totalEvents} —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏`
          : `–ù–∞–π–¥–µ–Ω–æ ${inconsistentEvents} –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ ${totalEvents} —Å–æ–±—ã—Ç–∏–π`,
        details: validationResults
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
        details: error
      };
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
   */
  static async testRegistrationFlow(eventId: string): Promise<MigrationStatus> {
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

      const testEmail = `test+${Date.now()}@example.com`;
      const testData = {
        eventId: eventId,
        fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        email: testEmail,
        phone: '+381123456789',
        tickets: 1
      };

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      const result = await SimpleRegistrationService.createRegistration(testData);

      if (!result.success) {
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${result.error}`,
        };
      }

      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', result.registration?.id);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º QR –∫–æ–¥
      if (result.registration?.qr_code) {
        const qrResult = await SimpleRegistrationService.verifyQRCode(result.registration.qr_code);
        if (!qrResult) {
          return {
            success: false,
            message: 'QR –∫–æ–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
          };
        }
        console.log('‚úÖ QR –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }

      // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      if (result.registration?.id) {
        const cancelResult = await SimpleRegistrationService.cancelRegistration(result.registration.id);
        if (cancelResult.success) {
          console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
        }
      }

      return {
        success: true,
        message: '–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ',
        details: result.registration
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
        details: error
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
   */
  static async getSystemStats(): Promise<MigrationStatus> {
    try {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–µ simple_registrations
      const { data: regStats, error: regError } = await supabase
        .from('simple_registrations')
        .select('registration_status, payment_status');

      if (regError) throw regError;

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
      const { data: eventStats, error: eventError } = await supabase
        .from('events')
        .select('simple_payment_type, registration_enabled, max_registrations, current_registrations');

      if (eventError) throw eventError;

      const stats = {
        registrations: {
          total: regStats?.length || 0,
          active: regStats?.filter(r => r.registration_status === 'active').length || 0,
          cancelled: regStats?.filter(r => r.registration_status === 'cancelled').length || 0,
          paymentStatusBreakdown: {
            free: regStats?.filter(r => r.payment_status === 'free').length || 0,
            donation: regStats?.filter(r => r.payment_status === 'donation').length || 0,
            venue: regStats?.filter(r => r.payment_status === 'venue').length || 0,
            online_pending: regStats?.filter(r => r.payment_status === 'online_pending').length || 0,
            online_paid: regStats?.filter(r => r.payment_status === 'online_paid').length || 0,
          }
        },
        events: {
          total: eventStats?.length || 0,
          withNewPaymentType: eventStats?.filter(e => e.simple_payment_type).length || 0,
          registrationEnabled: eventStats?.filter(e => e.registration_enabled).length || 0,
          paymentTypeBreakdown: {
            free: eventStats?.filter(e => e.simple_payment_type === 'free').length || 0,
            donation: eventStats?.filter(e => e.simple_payment_type === 'donation').length || 0,
            paid: eventStats?.filter(e => e.simple_payment_type === 'paid').length || 0,
          }
        }
      };

      return {
        success: true,
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        details: stats
      };

    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        details: error
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
   */
  static async runFullDiagnostic(): Promise<MigrationStatus> {
    try {
      console.log('üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...\n');

      const results = {
        systemAvailability: await this.checkNewSystemAvailability(),
        stats: await this.getSystemStats(),
        validation: null as MigrationStatus | null
      };

      // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
      if (results.systemAvailability.success) {
        results.validation = await this.validateMigration();
      }

      console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
      console.log('- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:', results.systemAvailability.success ? '‚úÖ' : '‚ùå');
      
      if (results.stats.success) {
        const stats = results.stats.details;
        console.log(`- –í—Å–µ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ: ${stats.registrations.total}`);
        console.log(`- –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: ${stats.registrations.active}`);
        console.log(`- –°–æ–±—ã—Ç–∏–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏: ${stats.events.withNewPaymentType}/${stats.events.total}`);
      }

      if (results.validation) {
        console.log('- –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:', results.validation.success ? '‚úÖ' : '‚ö†Ô∏è');
      }

      const overallSuccess = results.systemAvailability.success && 
                           results.stats.success && 
                           (!results.validation || results.validation.success);

      return {
        success: overallSuccess,
        message: overallSuccess ? '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ' : '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã',
        details: results
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
        details: error
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  static async createTestEvent(): Promise<MigrationStatus> {
    try {
      console.log('üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...');

      const testEvent = {
        title: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ${new Date().toISOString()}`,
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π',
        event_type: 'workshop',
        start_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –∑–∞–≤—Ç—Ä–∞
        end_at: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(),
        location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
        age_category: '0+',
        price: 100,
        currency: 'RSD',
        status: 'active',
        
        // –ù–æ–≤—ã–µ –ø–æ–ª—è
        simple_payment_type: 'paid',
        max_registrations: 10,
        current_registrations: 0,
        registration_enabled: true,
        
        // –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        payment_type: 'paid',
        languages: ['Serbian', 'English']
      };

      const { data, error } = await supabase
        .from('events')
        .insert(testEvent)
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data.id);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
      const registrationTest = await this.testRegistrationFlow(data.id);

      return {
        success: registrationTest.success,
        message: registrationTest.success 
          ? `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ (ID: ${data.id})`
          : `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${registrationTest.message}`,
        details: {
          event: data,
          registrationTest: registrationTest
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è',
        details: error
      };
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  static async cleanupTestData(): Promise<MigrationStatus> {
    try {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const { error: regError } = await supabase
        .from('simple_registrations')
        .delete()
        .like('email', 'test+%@example.com');

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
      const { error: eventError } = await supabase
        .from('events')
        .delete()
        .like('title', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ%');

      if (regError || eventError) {
        throw regError || eventError;
      }

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

      return {
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        details: error
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  static async getAvailableEvents(): Promise<MigrationStatus> {
    try {
      const { data: events, error } = await supabase
        .from('events')
        .select('id, title, start_at, simple_payment_type, max_registrations, current_registrations')
        .eq('status', 'active')
        .order('start_at', { ascending: true })
        .limit(10);

      if (error) throw error;

      return {
        success: true,
        message: `–ù–∞–π–¥–µ–Ω–æ ${events?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π`,
        details: events
      };

    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π',
        details: error
      };
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  static async quickCheck(): Promise<MigrationStatus> {
    try {
      console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      const availability = await this.checkNewSystemAvailability();
      if (!availability.success) {
        return availability;
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const stats = await this.getSystemStats();
      if (!stats.success) {
        return stats;
      }

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
      const events = await this.getAvailableEvents();
      if (!events.success) {
        return events;
      }

      console.log('‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return {
        success: true,
        message: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        details: {
          stats: stats.details,
          eventsCount: events.details?.length || 0
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ',
        details: error
      };
    }
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
  (window as any).MigrationUtility = MigrationUtility;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
  (window as any).checkSystem = () => MigrationUtility.checkNewSystemAvailability();
  (window as any).runMigration = () => MigrationUtility.runMigration();
  (window as any).validateData = () => MigrationUtility.validateMigration();
  (window as any).getStats = () => MigrationUtility.getSystemStats();
  (window as any).fullDiagnostic = () => MigrationUtility.runFullDiagnostic();
  (window as any).quickCheck = () => MigrationUtility.quickCheck();
  
  console.log('üîß Migration utilities loaded! Available commands:');
  console.log('- checkSystem() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
  console.log('- runMigration() - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö');
  console.log('- validateData() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å');
  console.log('- getStats() - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
  console.log('- fullDiagnostic() - –ø–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
  console.log('- quickCheck() - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
}

export default MigrationUtility;