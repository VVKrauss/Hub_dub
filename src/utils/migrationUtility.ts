// src/utils/migrationUtility.ts
import { supabase } from '../lib/supabase';
import SimpleRegistrationService from '../services/SimpleRegistrationService';

export interface MigrationStatus {
  success: boolean;
  message: string;
  details?: any;
}

export class MigrationUtility {
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
   */
  static async checkNewSystemAvailability(): Promise<MigrationStatus> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã simple_registrations
      const { data, error } = await supabase
        .from('simple_registrations')
        .select('id')
        .limit(1);

      if (error) {
        return {
          success: false,
          message: '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é.',
          details: error
        };
      }

      return {
        success: true,
        message: '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞'
      };

    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã',
        details: error
      };
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
   */
  static async runMigration(): Promise<MigrationStatus> {
    try {
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç–∞—Ä—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π...');

      const { error } = await supabase.rpc('migrate_old_registrations');
      
      if (error) {
        return {
          success: false,
          message: `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`,
          details: error
        };
      }

      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return {
        success: true,
        message: '–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏',
        details: error
      };
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  static async quickCheck(): Promise<MigrationStatus> {
    try {
      console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      const availability = await this.checkNewSystemAvailability();
      if (!availability.success) {
        return availability;
      }

      // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
      const { data: events, error: eventsError } = await supabase
        .from('events')
        .select('id, title, start_at, simple_payment_type, max_registrations, current_registrations')
        .eq('status', 'active')
        .order('start_at', { ascending: true })
        .limit(5);

      if (eventsError) {
        return {
          success: false,
          message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π',
          details: eventsError
        };
      }

      console.log('‚úÖ –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      return {
        success: true,
        message: `–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–∞–π–¥–µ–Ω–æ ${events?.length || 0} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π`,
        details: {
          eventsCount: events?.length || 0,
          events: events
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ',
        details: error
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  static async createTestEvent(): Promise<MigrationStatus> {
    try {
      console.log('üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...');

      const testEvent = {
        title: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ ${new Date().toISOString()}`,
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π',
        event_type: 'workshop',
        start_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // –∑–∞–≤—Ç—Ä–∞
        end_at: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(),
        location: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
        age_category: '0+',
        price: 100,
        currency: 'RSD',
        status: 'active',
        
        // –ù–æ–≤—ã–µ –ø–æ–ª—è
        simple_payment_type: 'paid',
        max_registrations: 10,
        current_registrations: 0,
        registration_enabled: true,
        
        // –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        payment_type: 'paid',
        languages: ['Serbian', 'English']
      };

      const { data, error } = await supabase
        .from('events')
        .insert(testEvent)
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', data.id);

      return {
        success: true,
        message: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID: ${data.id})`,
        details: {
          event: data
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è',
        details: error
      };
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  static async cleanupTestData(): Promise<MigrationStatus> {
    try {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const { error: regError } = await supabase
        .from('simple_registrations')
        .delete()
        .like('email', 'test+%@example.com');

      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
      const { error: eventError } = await supabase
        .from('events')
        .delete()
        .like('title', '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ%');

      if (regError || eventError) {
        throw regError || eventError;
      }

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');

      return {
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã'
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        details: error
      };
    }
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç—ã –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
  (window as any).MigrationUtility = MigrationUtility;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
  (window as any).checkSystem = () => MigrationUtility.checkNewSystemAvailability();
  (window as any).runMigration = () => MigrationUtility.runMigration();
  (window as any).quickCheck = () => MigrationUtility.quickCheck();
  (window as any).createTestEvent = () => MigrationUtility.createTestEvent();
  (window as any).cleanupTestData = () => MigrationUtility.cleanupTestData();
  
  console.log('üîß Migration utilities loaded! Available commands:');
  console.log('- checkSystem() - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
  console.log('- runMigration() - –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö');
  console.log('- quickCheck() - –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
  console.log('- createTestEvent() - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ');
  console.log('- cleanupTestData() - –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
}

export default MigrationUtility;